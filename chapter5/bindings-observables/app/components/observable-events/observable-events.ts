import { Component } from '@angular/core';
import { FormControl } from '@angular/forms';

/*
We can either import the implementation of specific operatos, as is done here, or import
all of them using import 'rxjs/Rx'.
*/
//import 'rxjs/Rx'; // import all operators
import 'rxjs/add/operator/debounceTime';

/*
This component shows an example of Reactive programming and observables.
*/
@Component({
    selector: 'observable-events',
    template: `
        <h2>Observable events demo</h2>
        <input type="text" placeholder="Enter stock" [formControl]="searchInput">
        `
})
export class ObservableEventsComponent {
    searchInput: FormControl = new FormControl('');

    /*
    The method "debounceTime()" waits 500 milliseconds before emitting the next
    event with the content of the <input> element.

    The subscribe() method creates the instance of Observer, which in this case passes
    each value from the stream generated by the searchInput to the getStockQuoteFromServer()
    method. In a real-world scenario, this method would issue a request to the server.
    */
    constructor() {
        this.searchInput.valueChanges
            .debounceTime(500)
            .subscribe(stockValue => this.getStockQuoteFromServer(stockValue));
    }

    getStockQuoteFromServer(stockValue: string) {
        console.log(`The price of ${stockValue} is ${(100 * Math.random()).toFixed(4)}`);
    }
}